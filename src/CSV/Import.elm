module CSV.Import exposing (generate)

{-| Generates a list of localized elements for multiple modules from a CSV
string. The CSV string is expected to have the following columns:
modulename, key, comment, placeholders, value

This matches the export format generated by CSV.Export.generate.

Use Localized.Writer.write to create elm code from the list of localized
elements.

@docs generate

-}

import Csv
import Dict
import Localized exposing (..)
import Set


{-| Generates localized elements for multiple modules from a CSV
string. The CSV string is expected to have the following columns:
modulename, key, comment, placeholders, value

You will usually use this output to create elm code:

    CSV.Import.generate csvString
        |> Localized.Writer.write

-}
generate : ModuleName -> SourceCode -> List Element
generate moduleName csv =
    case Csv.parse csv of
        Result.Ok lines ->
            generateForCsv moduleName lines

        Result.Err err ->
            Debug.log "Could not parse CSV" err
                |> always []


generateForCsv : ModuleName -> Csv.Csv -> List Element
generateForCsv moduleName lines =
    let
        modules =
            allModuleNames lines.records
                |> List.map
                    (\mn ->
                        if mn /= moduleName then
                            let
                                _ =
                                    Debug.log "WARNING: found a module name in a CSV file where it does not belong" { key = mn, file = moduleName }
                            in
                            mn

                        else
                            mn
                    )
                |> Set.fromList
                |> Set.toList

        -- The lines can contain multiple modules.
        -- Generate a dictionary of all modules and there respective lines in the CSV.
        linesForModules =
            modules
                |> List.map
                    (\name ->
                        ( name
                        , linesForModule name lines.records
                        )
                    )
                |> Dict.fromList

        linesForThisModule =
            Dict.get moduleName linesForModules
                |> Maybe.withDefault []
    in
    -- Generate the source code for only out module, ignore the keys which don't belong here (warned above)
    generateForModule linesForThisModule


generateForModule : List (List String) -> List Localized.Element
generateForModule lines =
    List.filterMap fromLine lines


allModuleNames : List (List String) -> List ModuleName
allModuleNames lines =
    List.filterMap moduleNameForLine lines


moduleNameForLine : List String -> Maybe String
moduleNameForLine columns =
    case columns of
        modulename :: _ :: _ :: _ :: _ :: xs ->
            Just modulename

        _ ->
            Nothing


linesForModule : Localized.ModuleName -> List (List String) -> List (List String)
linesForModule moduleName lines =
    List.filter (\line -> moduleNameForLine line == Just moduleName) lines


fromLine : List String -> Maybe Localized.Element
fromLine columns =
    case columns of
        _ :: key :: comment :: placeholders :: value :: xs ->
            Just (code key comment placeholders value)

        _ ->
            Nothing


code : Localized.Key -> Localized.Comment -> String -> Localized.Value -> Localized.Element
code key comment placeholderString value =
    let
        placeholders =
            String.split " " placeholderString
                |> List.map String.trim
                |> List.filter (String.isEmpty >> not)

        numPlaceholders =
            List.length placeholders
    in
    if numPlaceholders == 0 then
        staticElement key comment value

    else
        formatElement key comment placeholders value


formatElement : Localized.Key -> Localized.Comment -> List Localized.Placeholder -> Localized.Value -> Localized.Element
formatElement key comment placeholders value =
    let
        components =
            -- "Hello {{p}} Goodbye {{q}}" -> ["Hello ", "p}} Goodbye ", "q }}"]
            String.split "{{" value
                |> withoutEmptyStrings
                |> List.map
                    (\candidate ->
                        if String.contains "}}" candidate then
                            -- "p}} Goodbye " -> ["p", " Goodbye "]
                            String.split "}}" candidate
                                |> withoutEmptyStrings
                                -- ["p", " Goodbye "] -> [FormatComponentPlaceholder "p", Localized.FormatComponentStatic " Goodbye "]
                                |> List.indexedMap
                                    (\index submatch ->
                                        if modBy 2 index == 0 then
                                            Localized.FormatComponentPlaceholder (String.trim submatch)

                                        else
                                            Localized.FormatComponentStatic submatch
                                    )

                        else
                            [ Localized.FormatComponentStatic candidate ]
                    )
                |> List.concat
    in
    Localized.ElementFormat
        { meta =
            { key = key
            , comment = comment
            }
        , placeholders = placeholders
        , components = components
        }


staticElement : Localized.Key -> Localized.Comment -> Localized.Value -> Localized.Element
staticElement key comment value =
    Localized.ElementStatic
        { meta =
            { key = key
            , comment = comment
            }
        , value = value
        }


withoutEmptyStrings : List String -> List String
withoutEmptyStrings =
    List.filter (String.isEmpty >> not)
