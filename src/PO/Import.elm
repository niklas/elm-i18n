module PO.Import exposing (generate)

{-| Generates a list of localized elements for multiple modules from a PO
string.

This matches the export format generated by PO.Export.generate.

Use Localized.Writer.write to create elm code from the list of localized
elements.

@docs generate

-}

import Dict exposing (Dict)
import Localized exposing (..)
import PO.Import.Internal exposing (..)


{-| Generates localized elements for a module from a PO
string. The msgids in the PO file are expected to include the module name and
key. For example `msgid "Main.title"` will generate a
`Localized.Element` with key `title` and module `Main`.

You will usually use this output to create elm code:

    PO.Import.generate ( "Main", poString )
        |> Localized.Writer.write

-}
generate : ( ModuleName, SourceCode ) -> Module
generate ( moduleName, poString ) =
    let
        allKeysWithModuleName =
            keys poString

        _ =
            allKeysWithModuleName
                |> List.map
                    (\( keyModuleName, _ ) ->
                        { key = keyModuleName, file = moduleName }
                            |> (if keyModuleName /= moduleName then
                                    Debug.log "WARNING: found a module name in a PO file where it does not belong"

                                else
                                    identity
                               )
                    )

        allKeys =
            allKeysWithModuleName |> List.map Tuple.second |> List.concat

        fullComments =
            poComments poString moduleName allKeys

        fullCommentForKey key =
            Dict.get key fullComments |> Maybe.withDefault ""

        allValues =
            values poString moduleName allKeys

        valueForKey key =
            Dict.get key allValues |> Maybe.withDefault ""
    in
    List.map
        (\key ->
            element key (valueForKey key) (fullCommentForKey key)
        )
        allKeys
        |> Localized.buildModule moduleName
